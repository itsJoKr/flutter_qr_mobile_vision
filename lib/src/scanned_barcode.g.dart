// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum ScannedBarcodeFormat {
  unknown,
  CODE_128,
  CODE_39,
  CODE_93,
  CODABAR,
  DATA_MATRIX,
  EAN_13,
  EAN_8,
  ITF,
  QR_CODE,
  UPC_A,
  UPC_E,
  PDF417,
  AZTEC,
}

class ScannedBarcodesResponse {
  ScannedBarcodesResponse({
    required this.barcodes,
  });

  List<ScannedBarcode?> barcodes;

  Object encode() {
    return <Object?>[
      barcodes,
    ];
  }

  static ScannedBarcodesResponse decode(Object result) {
    result as List<Object?>;
    return ScannedBarcodesResponse(
      barcodes: (result[0] as List<Object?>?)!.cast<ScannedBarcode?>(),
    );
  }
}

class ScannedBarcode {
  ScannedBarcode({
    required this.barcode,
    this.format,
    this.rect,
  });

  String barcode;

  ScannedBarcodeFormat? format;

  /// https://developers.google.com/ml-kit/reference/swift/mlkitbarcodescanning/api/reference/Classes/Barcode
  BarcodeRect? rect;

  Object encode() {
    return <Object?>[
      barcode,
      format?.index,
      rect?.encode(),
    ];
  }

  static ScannedBarcode decode(Object result) {
    result as List<Object?>;
    return ScannedBarcode(
      barcode: result[0]! as String,
      format: result[1] != null
          ? ScannedBarcodeFormat.values[result[1]! as int]
          : null,
      rect: result[2] != null
          ? BarcodeRect.decode(result[2]! as List<Object?>)
          : null,
    );
  }
}

class BarcodeRect {
  BarcodeRect({
    required this.imageWidth,
    required this.imageHeight,
    required this.left,
    required this.top,
    required this.right,
    required this.bottom,
  });

  int imageWidth;

  int imageHeight;

  int left;

  int top;

  int right;

  int bottom;

  Object encode() {
    return <Object?>[
      imageWidth,
      imageHeight,
      left,
      top,
      right,
      bottom,
    ];
  }

  static BarcodeRect decode(Object result) {
    result as List<Object?>;
    return BarcodeRect(
      imageWidth: result[0]! as int,
      imageHeight: result[1]! as int,
      left: result[2]! as int,
      top: result[3]! as int,
      right: result[4]! as int,
      bottom: result[5]! as int,
    );
  }
}

class _QrMobileVisionApiCodec extends StandardMessageCodec {
  const _QrMobileVisionApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BarcodeRect) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ScannedBarcode) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ScannedBarcodesResponse) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return BarcodeRect.decode(readValue(buffer)!);
      case 129: 
        return ScannedBarcode.decode(readValue(buffer)!);
      case 130: 
        return ScannedBarcodesResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class QrMobileVisionApi {
  static const MessageCodec<Object?> codec = _QrMobileVisionApiCodec();

  void onScannedBarcode(ScannedBarcodesResponse barcode);

  static void setup(QrMobileVisionApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.qr_mobile_vision.QrMobileVisionApi.onScannedBarcode', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.qr_mobile_vision.QrMobileVisionApi.onScannedBarcode was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ScannedBarcodesResponse? arg_barcode = (args[0] as ScannedBarcodesResponse?);
          assert(arg_barcode != null,
              'Argument for dev.flutter.pigeon.qr_mobile_vision.QrMobileVisionApi.onScannedBarcode was null, expected non-null ScannedBarcodesResponse.');
          api.onScannedBarcode(arg_barcode!);
          return;
        });
      }
    }
  }
}
