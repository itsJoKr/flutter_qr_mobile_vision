// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.github.rmtmckenzie.qrmobilevision;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class ScannedBarcodePigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ScannedBarcodesResponse {
    private @NonNull List<ScannedBarcode> barcodes;

    public @NonNull List<ScannedBarcode> getBarcodes() {
      return barcodes;
    }

    public void setBarcodes(@NonNull List<ScannedBarcode> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"barcodes\" is null.");
      }
      this.barcodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ScannedBarcodesResponse() {}

    public static final class Builder {

      private @Nullable List<ScannedBarcode> barcodes;

      public @NonNull Builder setBarcodes(@NonNull List<ScannedBarcode> setterArg) {
        this.barcodes = setterArg;
        return this;
      }

      public @NonNull ScannedBarcodesResponse build() {
        ScannedBarcodesResponse pigeonReturn = new ScannedBarcodesResponse();
        pigeonReturn.setBarcodes(barcodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(barcodes);
      return toListResult;
    }

    static @NonNull ScannedBarcodesResponse fromList(@NonNull ArrayList<Object> list) {
      ScannedBarcodesResponse pigeonResult = new ScannedBarcodesResponse();
      Object barcodes = list.get(0);
      pigeonResult.setBarcodes((List<ScannedBarcode>) barcodes);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ScannedBarcode {
    private @NonNull String barcode;

    public @NonNull String getBarcode() {
      return barcode;
    }

    public void setBarcode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"barcode\" is null.");
      }
      this.barcode = setterArg;
    }

    private @Nullable Long boundLeft;

    public @Nullable Long getBoundLeft() {
      return boundLeft;
    }

    public void setBoundLeft(@Nullable Long setterArg) {
      this.boundLeft = setterArg;
    }

    private @Nullable Long boundTop;

    public @Nullable Long getBoundTop() {
      return boundTop;
    }

    public void setBoundTop(@Nullable Long setterArg) {
      this.boundTop = setterArg;
    }

    private @Nullable Long boundRight;

    public @Nullable Long getBoundRight() {
      return boundRight;
    }

    public void setBoundRight(@Nullable Long setterArg) {
      this.boundRight = setterArg;
    }

    private @Nullable Long boundBottom;

    public @Nullable Long getBoundBottom() {
      return boundBottom;
    }

    public void setBoundBottom(@Nullable Long setterArg) {
      this.boundBottom = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ScannedBarcode() {}

    public static final class Builder {

      private @Nullable String barcode;

      public @NonNull Builder setBarcode(@NonNull String setterArg) {
        this.barcode = setterArg;
        return this;
      }

      private @Nullable Long boundLeft;

      public @NonNull Builder setBoundLeft(@Nullable Long setterArg) {
        this.boundLeft = setterArg;
        return this;
      }

      private @Nullable Long boundTop;

      public @NonNull Builder setBoundTop(@Nullable Long setterArg) {
        this.boundTop = setterArg;
        return this;
      }

      private @Nullable Long boundRight;

      public @NonNull Builder setBoundRight(@Nullable Long setterArg) {
        this.boundRight = setterArg;
        return this;
      }

      private @Nullable Long boundBottom;

      public @NonNull Builder setBoundBottom(@Nullable Long setterArg) {
        this.boundBottom = setterArg;
        return this;
      }

      public @NonNull ScannedBarcode build() {
        ScannedBarcode pigeonReturn = new ScannedBarcode();
        pigeonReturn.setBarcode(barcode);
        pigeonReturn.setBoundLeft(boundLeft);
        pigeonReturn.setBoundTop(boundTop);
        pigeonReturn.setBoundRight(boundRight);
        pigeonReturn.setBoundBottom(boundBottom);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(barcode);
      toListResult.add(boundLeft);
      toListResult.add(boundTop);
      toListResult.add(boundRight);
      toListResult.add(boundBottom);
      return toListResult;
    }

    static @NonNull ScannedBarcode fromList(@NonNull ArrayList<Object> list) {
      ScannedBarcode pigeonResult = new ScannedBarcode();
      Object barcode = list.get(0);
      pigeonResult.setBarcode((String) barcode);
      Object boundLeft = list.get(1);
      pigeonResult.setBoundLeft((boundLeft == null) ? null : ((boundLeft instanceof Integer) ? (Integer) boundLeft : (Long) boundLeft));
      Object boundTop = list.get(2);
      pigeonResult.setBoundTop((boundTop == null) ? null : ((boundTop instanceof Integer) ? (Integer) boundTop : (Long) boundTop));
      Object boundRight = list.get(3);
      pigeonResult.setBoundRight((boundRight == null) ? null : ((boundRight instanceof Integer) ? (Integer) boundRight : (Long) boundRight));
      Object boundBottom = list.get(4);
      pigeonResult.setBoundBottom((boundBottom == null) ? null : ((boundBottom instanceof Integer) ? (Integer) boundBottom : (Long) boundBottom));
      return pigeonResult;
    }
  }

  private static class QrMobileVisionApiCodec extends StandardMessageCodec {
    public static final QrMobileVisionApiCodec INSTANCE = new QrMobileVisionApiCodec();

    private QrMobileVisionApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return ScannedBarcode.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ScannedBarcodesResponse.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof ScannedBarcode) {
        stream.write(128);
        writeValue(stream, ((ScannedBarcode) value).toList());
      } else if (value instanceof ScannedBarcodesResponse) {
        stream.write(129);
        writeValue(stream, ((ScannedBarcodesResponse) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class QrMobileVisionApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public QrMobileVisionApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    @SuppressWarnings("UnknownNullness")
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by QrMobileVisionApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return QrMobileVisionApiCodec.INSTANCE;
    }
    public void onScannedBarcode(@NonNull ScannedBarcodesResponse barcodeArg, @NonNull Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.qr_mobile_vision.QrMobileVisionApi.onScannedBarcode", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(barcodeArg)),
          channelReply -> callback.reply(null));
    }
  }
}
