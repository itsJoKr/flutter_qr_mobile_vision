// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ScannedBarcodeFormat: Int {
  case unknown = 0
  case cODE128 = 1
  case cODE39 = 2
  case cODE93 = 3
  case cODABAR = 4
  case dATAMATRIX = 5
  case eAN13 = 6
  case eAN8 = 7
  case iTF = 8
  case qRCODE = 9
  case uPCA = 10
  case uPCE = 11
  case pDF417 = 12
  case aZTEC = 13
}

/// Generated class from Pigeon that represents data sent in messages.
struct ScannedBarcodesResponse {
  var barcodes: [ScannedBarcode?]

  static func fromList(_ list: [Any?]) -> ScannedBarcodesResponse? {
    let barcodes = list[0] as! [ScannedBarcode?]

    return ScannedBarcodesResponse(
      barcodes: barcodes
    )
  }
  func toList() -> [Any?] {
    return [
      barcodes,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ScannedBarcode {
  var barcode: String
  var format: ScannedBarcodeFormat? = nil
  /// https://developers.google.com/ml-kit/reference/swift/mlkitbarcodescanning/api/reference/Classes/Barcode
  var rect: BarcodeRect? = nil

  static func fromList(_ list: [Any?]) -> ScannedBarcode? {
    let barcode = list[0] as! String
    var format: ScannedBarcodeFormat? = nil
    let formatEnumVal: Int? = nilOrValue(list[1])
    if let formatRawValue = formatEnumVal {
      format = ScannedBarcodeFormat(rawValue: formatRawValue)!
    }
    var rect: BarcodeRect? = nil
    if let rectList: [Any?] = nilOrValue(list[2]) {
      rect = BarcodeRect.fromList(rectList)
    }

    return ScannedBarcode(
      barcode: barcode,
      format: format,
      rect: rect
    )
  }
  func toList() -> [Any?] {
    return [
      barcode,
      format?.rawValue,
      rect?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BarcodeRect {
  var imageWidth: Int64
  var imageHeight: Int64
  var left: Int64
  var top: Int64
  var right: Int64
  var bottom: Int64

  static func fromList(_ list: [Any?]) -> BarcodeRect? {
    let imageWidth = list[0] is Int64 ? list[0] as! Int64 : Int64(list[0] as! Int32)
    let imageHeight = list[1] is Int64 ? list[1] as! Int64 : Int64(list[1] as! Int32)
    let left = list[2] is Int64 ? list[2] as! Int64 : Int64(list[2] as! Int32)
    let top = list[3] is Int64 ? list[3] as! Int64 : Int64(list[3] as! Int32)
    let right = list[4] is Int64 ? list[4] as! Int64 : Int64(list[4] as! Int32)
    let bottom = list[5] is Int64 ? list[5] as! Int64 : Int64(list[5] as! Int32)

    return BarcodeRect(
      imageWidth: imageWidth,
      imageHeight: imageHeight,
      left: left,
      top: top,
      right: right,
      bottom: bottom
    )
  }
  func toList() -> [Any?] {
    return [
      imageWidth,
      imageHeight,
      left,
      top,
      right,
      bottom,
    ]
  }
}
private class QrMobileVisionApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return BarcodeRect.fromList(self.readValue() as! [Any?])
      case 129:
        return ScannedBarcode.fromList(self.readValue() as! [Any?])
      case 130:
        return ScannedBarcodesResponse.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class QrMobileVisionApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BarcodeRect {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? ScannedBarcode {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? ScannedBarcodesResponse {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class QrMobileVisionApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return QrMobileVisionApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return QrMobileVisionApiCodecWriter(data: data)
  }
}

class QrMobileVisionApiCodec: FlutterStandardMessageCodec {
  static let shared = QrMobileVisionApiCodec(readerWriter: QrMobileVisionApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class QrMobileVisionApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return QrMobileVisionApiCodec.shared
  }
  func onScannedBarcode(barcode barcodeArg: ScannedBarcodesResponse, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.qr_mobile_vision.QrMobileVisionApi.onScannedBarcode", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([barcodeArg] as [Any?]) { _ in
      completion()
    }
  }
}
